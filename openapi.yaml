openapi: 3.0.3
info:
  title: BoardWare Argus APIs
  description: |-
    BoardWare cloud Argus monitoring service api
  contact:
    email: dan.chen@boardware.com
  version: 0.0.15
servers:
  - url: http://localhost/argus/api/v1
tags:
  - name: Monitor
    description: Api of monitor
  - name: Reserved
    description: Api of reserved
paths:
  /monitors:
    post:
      tags:
        - Monitor
      description: Create monitor
      operationId: CreateMonitor
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutMonitorRequest'
      responses:
        '201':
          description: Success create monitor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Monitor'
    get:
      tags:
        - Monitor
      description: List monitors
      operationId: ListMonitors
      parameters:
        - $ref: '#/components/parameters/Ordering'
        - $ref: '#/components/parameters/IndexParam'
        - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          description: Success List monitors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorList'
  /monitors/{id}:
    get:
      tags:
        - Monitor
      summary: Get a monitor by ID
      operationId: GetMonitor
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: 'Success get monitor detail'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Monitor'
    put:
      tags:
        - Monitor
      description: Update monitor detail
      operationId: UpdateMonitor
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutMonitorRequest'
      responses:
        '200':
          description: Success get monitor detail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Monitor'
    delete:
      tags:
        - Monitor
      description: Delete uptime monitor
      operationId: DeleteMonitor
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '204':
          description: Success delete uptime monitor
  /monitors/{id}/records:
    get:
      tags:
        - Monitor
      summary: Get a monitor by ID
      operationId: ListMonitoringRecords
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
        - $ref: '#/components/parameters/IndexParam'
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/StartAt'
        - $ref: '#/components/parameters/EndAt'
      responses:
        '200':
          description: 'Success get monitor records list'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitoringRecordList'
  /reserved:
    get:
      tags:
        - Reserved
      operationId: ListReserved
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservedList'
    post:
      tags:
        - Reserved
      operationId: CreateReservedMonitor
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateReservedRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reserved'
components:
  schemas:
    CreateReservedRequest:
      type: object
      properties:
        accountId:
          type: string
        startAt:
          type: integer
          format: int64
        expiredAt:
          type: integer
          format: int64
    Reserved:
      type: object
      required:
        - id
        - startAt
        - expiredAt
      properties:
        id:
          type: string
        startAt:
          type: integer
          format: int64
        expiredAt:
          type: integer
          format: int64
    ReservedList:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Reserved'
        pagination:
          $ref: '#/components/schemas/Pagination'
    Monitor:
      type: object
      required:
        - id
        - name
        - description
        - type
        - status
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        status:
          $ref: '#/components/schemas/MonitorStatus'
        type:
          $ref: '#/components/schemas/MonitorType'
        httpMonitor:
          $ref: '#/components/schemas/HttpMonitor'
        pingMonitor:
          $ref: '#/components/schemas/PingMonitor'
        notificationGroup:
          $ref: '#/components/schemas/NotificationGroup'
    MonitorStatus:
      description: 'Monitor Status'
      type: string
      enum: [ACTIVED, DISACTIVED]
    MonitorList:
      description: 'Monitor list'
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Monitor'
        pagination:
          $ref: '#/components/schemas/Pagination'
    PutMonitorRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        type:
          $ref: '#/components/schemas/MonitorType'
        status:
          $ref: '#/components/schemas/MonitorStatus'
        httpMonitor:
          $ref: '#/components/schemas/HttpMonitor'
        pingMonitor:
          $ref: '#/components/schemas/PingMonitor'
        notificationGroup:
          $ref: '#/components/schemas/NotificationGroup'
    HttpMonitor:
      type: object
      properties:
        method:
          $ref: '#/components/schemas/HttpMethod'
        url:
          type: string
        interval:
          description: Check interval in seconds
          type: integer
          format: int64
        timeout:
          description: Timeout in seconds
          type: integer
          format: int64
        retries:
          type: integer
          format: int64
        headers:
          type: array
          items:
            $ref: '#/components/schemas/Pair'
        acceptedStatusCodes:
          type: array
          items:
            type: string
    PingMonitor:
      type: object
      properties:
        url:
          type: string
        interval:
          description: Check interval in seconds
          type: integer
          format: int64
        timeout:
          description: Timeout in seconds
          type: integer
          format: int64
        retries:
          type: integer
          format: int64
    HttpRequest:
      type: object
      required:
        - url
      properties:
        method:
          $ref: '#/components/schemas/HttpMethod'
        url:
          type: string
        headers:
          type: array
          items:
            $ref: '#/components/schemas/Pair'
    ContentType:
      type: string
      enum: ["TEXT", "JSON", "XML"]
    BodyForm:
      type: string
      enum: ["RAW", "X_WWW_FORM_URLENCODED"]
    MonitorType:
      type: string
      enum: [ HTTP, PING ]
    MonitoringRecord:
      description: 'Monitoring record'
      type: object
      required:
        - checkedAt
        - result
        - responseTime
      properties:
        checkedAt:
          type: integer
          format: int64
        responseTime:
          type: integer
          format: int64
        result:
          $ref: '#/components/schemas/MonitoringResult'
    MonitoringRecordList:
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items: 
            $ref: '#/components/schemas/MonitoringRecord'
        pagination:
          $ref: '#/components/schemas/Pagination'
    MonitoringResult:
      type: string
      enum: ['OK', 'TIMEOUT','DOWN']
    HttpMethod:
      type: string
      enum: [ HEAD, GET, POST, PUT, PATCH ]
    Report:
      type: object
      properties:
        cron:
          type: string
        period:
          type: integer
          format: int64
        emailReceivers:
          $ref: '#/components/schemas/EmailReceivers'
    EmailReceivers:
      type: object
      required:
        - to
        - cc
        - bcc
      properties:
        to:
          type: array
          items:
            type: string
        cc:
          type: array
          items:
            type: string
        bcc:
          type: array
          items:
            type: string
    NotificationGroup:
      type: object
      properties:
        interval:
          type: integer
          format: int64
        notifications:
          type: array
          items:
            $ref: '#/components/schemas/Notification'
    Notification:
      type: object
      required:
        - type
      properties:
        interval:
          type: integer
          format: int64
        type:
          $ref: '#/components/schemas/NotificationType'
        emailReceivers:
          $ref: '#/components/schemas/EmailReceivers'
    NotificationType:
      type: string
      enum: [EMAIL]
    Ordering:
      description: 'Ordering'
      type: string
      enum: [ ASCENDING, DESCENDING ]
    Pagination:
      description: 'Pagination'
      type: object
      required:
        - index
        - limit
        - total
      properties:
        index:
          type: integer
          description: 'Current page'
        limit:
          type: integer
          description: 'Amount per page'
        total:
          type: integer
          format: int64
          description: 'Total page'
    Pair:
      type: object
      required:
        - left
        - right
      properties:
        left:
          type: string
        right:
          type: string
  parameters:
    Ordering:
      name: ordering
      description: 'Ordering mode'
      in: query
      schema:
        $ref: '#/components/schemas/Ordering'
    IndexParam:
      name: index
      in: query
      description: 'Current page index'
      schema:
        type: integer
        minimum: 0
        default: 0
    LimitParam:
      name: limit
      in: query
      description: 'Total pages'
      schema:
        type: integer
        minimum: 1
        default: 10
    StartAt:
      name: startAt
      in: query
      description: 'Unix timestamp Start at.'
      schema:
        type: integer
        format: int64
    EndAt:
      name: endAt
      in: query
      description: 'Unix timestamp End at.'
      schema:
        type: integer
        format: int64